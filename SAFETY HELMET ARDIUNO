#include <WiFi.h>
#include <FirebaseESP32.h>
#include <TinyGPS++.h>
TinyGPSPlus gps;
#include <SoftwareSerial.h>
SoftwareSerial ss(16,17);//arduino rx,tx
#include <Wire.h> 
#define AO_PIN 33  
#define IR_Sensor 14
#include "DHT.h"
#define DHTPIN 4
#define DHTTYPE DHT11   // DHT 11  
DHT dht(DHTPIN, DHTTYPE);


#define FIREBASE_HOST "https://smarthelmet-3e9ce-default-rtdb.firebaseio.com/"
#define FIREBASE_AUTH "AIzaSyA7oTvuqxus_xo1mdEMpBExozhI4ZFKvr0"
#define WIFI_SSID "501"
#define WIFI_PASSWORD "02771045"


//Define FirebaseESP32 data object
FirebaseData firebaseData;
FirebaseJson json;

//push button
const int Push_Button = 15;  
int Button_State = 0;   
int IR; 

//string to get the msg after button pressed
String alert="EMERGENCY ALERT (Button Pressed)";





void setup()
{

 Serial.begin(115200);
  pinMode(Push_Button, INPUT); 
  pinMode(IR_Sensor, INPUT);
  ss.begin(9600);
  dht.begin();

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
  Firebase.reconnectWiFi(true);

  //Set database read timeout to 1 minute (max 15 minutes)
  Firebase.setReadTimeout(firebaseData, 1000 * 60);
  //tiny, small, medium, large and unlimited.
  //Size and its write timeout e.g. tiny (1s), small (10s), medium (30s) and large (60s).
  Firebase.setwriteSizeLimit(firebaseData, "tiny");

  /*
  This option allows get and delete functions (PUT and DELETE HTTP requests) works for device connected behind the
  Firewall that allows only GET and POST requests.
  
  Firebase.enableClassicRequest(firebaseData, true);
  */

  //String path = "/data";
  

  Serial.println("------------------------------------");
  Serial.println("Connected...");
  
}

void loop()
{
////////////GAAAAAAAAAAAAAAAAAAAAASSSSSSSSSSS////////////////////////////////
   int gasValue = analogRead(AO_PIN);
 Serial.print("MQ2 sensor AO value: ");
  Serial.println(gasValue);
  //////////////////////////////////////////////////////////////////////////
///////BUTTTTTTTTTTTTTTTTON////////////////////
  Button_State = digitalRead(Push_Button);/Check pushbutton state/
Serial.println(Button_State);

///dht11 data/////////////////////////
delay(2000);
float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
  // Read temperature as Fahrenheit (isFahrenheit = true)
  float f = dht.readTemperature(true);

  ////////////////////////
 int Sdata = random(0,1023) ;
 Serial.println(Sdata); 
delay(100); 
  json.set("/Reading1", Sdata); 
  json.set("/Reading2", Sdata-100); 
  json.set("/Gas", gasValue);
  json.set("/Temperature", f);
  json.set("/Humidity", h);
  json.set("/Alert",Button_State);
  if(Button_State == 1)
  {
      json.set("/Alert1","Emergency_alert_(Button_Pressed)");
  }
  else
  {json.set("/Alert1","All-GOOD");}

  ////////////////////////////
  IR=digitalRead(IR_Sensor);  
  if(IR==LOW){               
  Serial.println("Helmet is On");
  json.set("/Helmet","Helmet-is-on");
}
else {
  Serial.println("NO helmet");
  json.set("/Helmet","Not-Wearing-Helmet");
}
  
  Firebase.updateNode(firebaseData,"/Sensor",json);


////dht 11 check whether its working or not 

// Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t) || isnan(f)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }

  // Compute heat index in Fahrenheit (the default)
  float hif = dht.computeHeatIndex(f, h);
  // Compute heat index in Celsius (isFahreheit = false)
  float hic = dht.computeHeatIndex(t, h, false);

  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
  Serial.print(F("째C "));
  Serial.print(f);
  Serial.print(F("째F  Heat index: "));
  Serial.print(hic);
  Serial.print(F("째C "));
  Serial.print(f);
  Serial.println(F("째F"));
//////////////////////////////////////////////////////


///////////gps add 
smartdelay_gps(1000);

  if(gps.location.isValid()) 
  {
   float latitude = gps.location.lat();
   float longitude = gps.location.lng();

    
    //-------------------------------------------------------------
   // Send to Serial Monitor for Debugging
    Serial.print("LAT:  ");
    Serial.println(latitude);  // float to x decimal places
    Serial.print("LONG: ");
    Serial.println(longitude);
    //-------------------------------------------------------------
    
    //-------------------------------------------------------------
    if(Firebase.setFloat(firebaseData, "/GPS/f_latitude", latitude))
      {print_ok();}
    else
      {print_fail();}
    //-------------------------------------------------------------
    if(Firebase.setFloat(firebaseData, "/GPS/f_longitude", longitude))
      {print_ok();}
    else
      {print_fail();}
   //-------------------------------------------------------------
  }
  else
  {
    Serial.println("No valid GPS data found.");
  }
  
  delay(5000);





  
}


///gps addd end

//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
static void smartdelay_gps(unsigned long ms)
{
  unsigned long start = millis();
  do 
  {
    while (ss.available())
      gps.encode(ss.read());
  } while (millis() - start < ms);





}



//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
void print_ok()
{
    Serial.println("------------------------------------");
    Serial.println("OK");
    Serial.println("PATH: " + firebaseData.dataPath());
    Serial.println("TYPE: " + firebaseData.dataType());
    Serial.println("ETag: " + firebaseData.ETag());
    Serial.println("------------------------------------");
    Serial.println();
}
//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM


//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
void print_fail()
{
    Serial.println("------------------------------------");
    Serial.println("FAILED");
    Serial.println("REASON: " + firebaseData.errorReason());
    Serial.println("------------------------------------");
    Serial.println();
}
